/**
* @File Name          : OC_AN_MC_ID_Journey_JSON
* @Description        : Generated by JSON2Apex http://json2apex.herokuapp.com/
					    The supplied json has fields with names that are not valid in apex
						and so can only be parsed with explicitly generated code, this option
						was auto selected for you.
* @Author             : IBM
* @Group              : OmniChannel - Service
* @Release            : R2106
* @Created Date       : 20th May 2021
* @Modification Log   :
*==============================================================================
* Ver         Date                     Author                Modification
*==============================================================================
* 1.0        2020-05-20                 IBM                   Initial Version
**/

public class OC_AN_MC_ID_Journey_JSON {

	public class TriggeredSend {
		public Boolean autoAddSubscribers {get;set;} 
		public Boolean autoUpdateSubscribers {get;set;} 
		public String bccEmail {get;set;} 
		public String ccEmail {get;set;} 
		public Created created {get;set;} 
		public List<Arguments> domainExclusions {get;set;} 
		public String dynamicEmailSubject {get;set;} 
		public Integer emailId {get;set;} 
		public String emailSubject {get;set;} 
		public String exclusionFilter {get;set;} 
		public Boolean isSalesforceTracking {get;set;} 
		public Boolean isMultipart {get;set;} 
		public Boolean isSendLogging {get;set;} 
		public Boolean isStoppedOnJobError {get;set;} 
		public Created modified {get;set;} 
		public String preHeader {get;set;} 
		public Integer priority {get;set;} 
		public String sendClassificationId {get;set;} 
		public String deliveryProfileId {get;set;} 
		public String senderProfileId {get;set;} 
		public Boolean isTrackingClicks {get;set;} 

		public TriggeredSend() {
		}

		public TriggeredSend(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'autoAddSubscribers') {
							autoAddSubscribers = parser.getBooleanValue();
						} else if (text == 'autoUpdateSubscribers') {
							autoUpdateSubscribers = parser.getBooleanValue();
						} else if (text == 'bccEmail') {
							bccEmail = parser.getText();
						} else if (text == 'ccEmail') {
							ccEmail = parser.getText();
						} else if (text == 'created') {
							created = new Created(parser);
						} else if (text == 'domainExclusions') {
							domainExclusions = arrayOfArguments(parser);
						} else if (text == 'dynamicEmailSubject') {
							dynamicEmailSubject = parser.getText();
						} else if (text == 'emailId') {
							emailId = parser.getIntegerValue();
						} else if (text == 'emailSubject') {
							emailSubject = parser.getText();
						} else if (text == 'exclusionFilter') {
							exclusionFilter = parser.getText();
						} else if (text == 'isSalesforceTracking') {
							isSalesforceTracking = parser.getBooleanValue();
						} else if (text == 'isMultipart') {
							isMultipart = parser.getBooleanValue();
						} else if (text == 'isSendLogging') {
							isSendLogging = parser.getBooleanValue();
						} else if (text == 'isStoppedOnJobError') {
							isStoppedOnJobError = parser.getBooleanValue();
						} else if (text == 'modified') {
							modified = new Created(parser);
						} else if (text == 'preHeader') {
							preHeader = parser.getText();
						} else if (text == 'priority') {
							priority = parser.getIntegerValue();
						} else if (text == 'sendClassificationId') {
							sendClassificationId = parser.getText();
						} else if (text == 'deliveryProfileId') {
							deliveryProfileId = parser.getText();
						} else if (text == 'senderProfileId') {
							senderProfileId = parser.getText();
						} else if (text == 'isTrackingClicks') {
							isTrackingClicks = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'TriggeredSend consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
		
	public class Schema {
		public Arguments_Y arguments {get;set;} 

		public Schema(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'arguments') {
							arguments = new Arguments_Y(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Schema consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ConfigurationArguments {
		public Boolean isModified {get;set;} 
		public TriggeredSend triggeredSend {get;set;} 
		public String applicationExtensionKey {get;set;} 
		public Integer waitDuration {get;set;} 
		public String waitUnit {get;set;} 
		public String timeZone {get;set;} 
		public String specifiedTime {get;set;} 

		public ConfigurationArguments() {
		}

		public ConfigurationArguments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'isModified') {
							isModified = parser.getBooleanValue();
						} else if (text == 'triggeredSend') {
							triggeredSend = new TriggeredSend(parser);
						} else if (text == 'applicationExtensionKey') {
							applicationExtensionKey = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ConfigurationArguments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AnalyticsTracking {
		public Boolean enabled {get;set;} 
		public String analyticsType {get;set;} 
		public List<Arguments> urlDomainsToTrack {get;set;} 

		public AnalyticsTracking(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'enabled') {
							enabled = parser.getBooleanValue();
						} else if (text == 'analyticsType') {
							analyticsType = parser.getText();
						} else if (text == 'urlDomainsToTrack') {
							urlDomainsToTrack = arrayOfArguments(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'AnalyticsTracking consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Properties {
		public AnalyticsTracking analyticsTracking {get;set;} 

		public Properties(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'analyticsTracking') {
							analyticsTracking = new AnalyticsTracking(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Properties consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Arguments_Y {
		public ActivityData_Z activityData {get;set;} 
		public ActivityData_Z contactKey {get;set;} 

		public Arguments_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'activityData') {
							activityData = new ActivityData_Z(parser);
						} else if (text == 'contactKey') {
							contactKey = new ActivityData_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Arguments_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String key {get;set;} 
	public String name {get;set;} 
	public String description {get;set;} 
	public Integer version {get;set;} 
	public Double workflowApiVersion {get;set;} 
	public List<Activities> activities {get;set;} 
	public List<Triggers> triggers {get;set;} 
	public List<Arguments> goals {get;set;} 
	public List<Arguments> exits {get;set;} 
	public Stats stats {get;set;} 
	public String entryMode {get;set;} 
	public String definitionType {get;set;} 
	public String channel {get;set;} 
	public Defaults defaults {get;set;} 
	public Arguments metaData {get;set;} 
	public String executionMode {get;set;} 
	public Integer categoryId {get;set;} 
	public String status {get;set;} 
	public String definitionId {get;set;} 
	public String scheduledStatus {get;set;} 

	public OC_AN_MC_ID_Journey_JSON() {
	}

	public OC_AN_MC_ID_Journey_JSON(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'key') {
						key = parser.getText();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'description') {
						description = parser.getText();
					} else if (text == 'version') {
						version = parser.getIntegerValue();
					} else if (text == 'workflowApiVersion') {
						workflowApiVersion = parser.getDoubleValue();
					} else if (text == 'activities') {
						activities = arrayOfActivities(parser);
					} else if (text == 'triggers') {
						triggers = arrayOfTriggers(parser);
					} else if (text == 'goals') {
						goals = arrayOfArguments(parser);
					} else if (text == 'exits') {
						exits = arrayOfArguments(parser);
					} else if (text == 'stats') {
						stats = new Stats(parser);
					} else if (text == 'entryMode') {
						entryMode = parser.getText();
					} else if (text == 'definitionType') {
						definitionType = parser.getText();
					} else if (text == 'channel') {
						channel = parser.getText();
					} else if (text == 'defaults') {
						defaults = new Defaults(parser);
					} else if (text == 'metaData') {
						metaData = new Arguments(parser);
					} else if (text == 'executionMode') {
						executionMode = parser.getText();
					} else if (text == 'categoryId') {
						categoryId = parser.getIntegerValue();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'definitionId') {
						definitionId = parser.getText();
					} else if (text == 'scheduledStatus') {
						scheduledStatus = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'OC_AN_MC_ID_Journey_JSON consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Outcomes {
		public String key {get;set;} 
		public String next {get;set;} 
		public Arguments arguments {get;set;} 
		public MetaData metaData {get;set;} 

		public Outcomes() {
		}

		public Outcomes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'key') {
							key = parser.getText();
						} else if (text == 'next') {
							next = parser.getText();
						} else if (text == 'arguments') {
							arguments = new Arguments(parser);
						} else if (text == 'metaData') {
							metaData = new MetaData(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Outcomes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Created {
		public String name {get;set;} 
		public String date_Z {get;set;} // in json: date

		public Created(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'date') {
							date_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Created consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MetaData {
		public Boolean invalid {get;set;} 

		public MetaData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'invalid') {
							invalid = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'MetaData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class UpdateContactFields {
		public String dataExtensionId {get;set;} 
		public String field {get;set;} 
		public String value {get;set;} 

		public UpdateContactFields() {
		}

		public UpdateContactFields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dataExtensionId') {
							dataExtensionId = parser.getText();
						} else if (text == 'field') {
							field = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'UpdateContactFields consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Activities {
		public String key {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public String type {get;set;} 
		public List<Outcomes> outcomes {get;set;} 
		public Arguments arguments {get;set;} 
		public ConfigurationArguments configurationArguments {get;set;} 
		public MetaData_Z metaData {get;set;} 
		public String id {get;set;} 
		public Schema schema {get;set;} 

		public Activities() {
		}

		public Activities(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'key') {
							key = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'outcomes') {
							outcomes = arrayOfOutcomes(parser);
						} else if (text == 'arguments') {
							arguments = new Arguments(parser);
						} else if (text == 'configurationArguments') {
							configurationArguments = new ConfigurationArguments(parser);
						} else if (text == 'metaData') {
							metaData = new MetaData_Z(parser);
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'schema') {
							schema = new Schema(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Activities consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ActivityData {
		public List<UpdateContactFields> updateContactFields {get;set;} 

		public ActivityData() {
		}

		public ActivityData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'updateContactFields') {
							updateContactFields = arrayOfUpdateContactFields(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ActivityData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Arguments {

		public ActivityData activityData {get;set;} 
		public ObjectMap objectMap {get;set;} 
		public String version {get;set;} 
		public String contactKey {get;set;} 
		public String contactId {get;set;} 
		public String definitionId {get;set;} 
		public String activityId {get;set;} 
		public String startActivityKey {get;set;} 
		public String definitionInstanceId {get;set;} 
		public String requestObjectId {get;set;} 
		public Integer serializedObjectType {get;set;} 
		public String eventDefinitionId {get;set;} 
		public String eventDefinitionKey {get;set;} 
		public String dataExtensionId {get;set;} 
		public String automationId {get;set;}

		public Arguments(){
		}

		public Arguments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Arguments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ObjectMap{
		public List<Objects> objects {get;set;} 
	}

	public class Objects{
		public String type {get;set;}
		public String order {get;set;}
		public String action {get;set;}
		public Lookup lookup {get;set;}
		public List<Fields> fields {get;set;}
	}

	public class Lookup{
		public String type {get;set;}
		public String lookupObject {get;set;}
		public List<Steps> steps {get;set;}
		public String MultiOutComeOption {get;set;}
		public String ZeroOutComeOption {get;set;}
	}

	public class Steps{
		public List<Criteria> criteria {get;set;}
	}

	public class Criteria{
		public String FieldName {get;set;}
		public String FieldValue {get;set;}
		public String FieldValueLabel {get;set;}
		public String FieldType {get;set;}
	}

	public class Fields{
		public String UpdateType  {get;set;}
		public String Updateable {get;set;}
		public String FieldName {get;set;}
		public String FieldLabel {get;set;}
		public String FieldValue {get;set;}
		public String FieldValueLabel {get;set;}
		public String Required {get;set;}
		public String FieldType {get;set;}
		public String MappingType {get;set;}
		public String Processor {get;set;}
	}

	public class Triggers {
		public String key {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public String type {get;set;} 
		public List<Arguments> outcomes {get;set;} 
		public Arguments arguments {get;set;} 
		public Arguments configurationArguments {get;set;} 
		public MetaData_W metaData {get;set;} 

		public Triggers(){
		}

		public Triggers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'key') {
							key = parser.getText();
						} else if (text == 'name') {
							name = parser.getText(); 
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'outcomes') {
							outcomes = arrayOfArguments(parser);
						} else if (text == 'arguments') {
							arguments = new Arguments(parser);
						} else if (text == 'configurationArguments') {
							configurationArguments = new Arguments(parser);
						} else if (text == 'metaData') {
							metaData = new MetaData_W(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Triggers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ActivityData_Z {
		public String dataType {get;set;} 
		public Boolean isNullable {get;set;} 
		public String direction {get;set;} 
		public Boolean readOnly {get;set;} 
		public String access {get;set;} 

		public ActivityData_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dataType') {
							dataType = parser.getText();
						} else if (text == 'isNullable') {
							isNullable = parser.getBooleanValue();
						} else if (text == 'direction') {
							direction = parser.getText();
						} else if (text == 'readOnly') {
							readOnly = parser.getBooleanValue();
						} else if (text == 'access') {
							access = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ActivityData_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Defaults {
		public List<String> email {get;set;} 
		public Properties properties {get;set;} 

		public Defaults(){
			
		}

		public Defaults(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'email') {
							email = arrayOfString(parser);
						} else if (text == 'properties') {
							properties = new Properties(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Defaults consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MetaData_W {
		public String sourceInteractionId {get;set;} 
		public String eventDefinitionId {get;set;} 
		public String eventDefinitionKey {get;set;} 
		public String chainType {get;set;} 
		public Boolean configurationRequired {get;set;} 
		public String iconUrl {get;set;} 
		public String title {get;set;} 
		public String entrySourceGroupConfigUrl {get;set;} 
		public String category {get;set;} 
		public String scheduleState {get;set;} 

		public MetaData_W(){

		}

		public MetaData_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sourceInteractionId') {
							sourceInteractionId = parser.getText();
						} else if (text == 'eventDefinitionId') {
							eventDefinitionId = parser.getText();
						} else if (text == 'eventDefinitionKey') {
							eventDefinitionKey = parser.getText();
						} else if (text == 'chainType') {
							chainType = parser.getText();
						} else if (text == 'configurationRequired') {
							configurationRequired = parser.getBooleanValue();
						} else if (text == 'iconUrl') {
							iconUrl = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'entrySourceGroupConfigUrl') {
							entrySourceGroupConfigUrl = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'MetaData_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MetaData_Z {
		public Boolean isConfigured {get;set;} 
		public Arguments sections {get;set;} 
		public String expressionBuilderPrefix {get;set;} 

		public MetaData_Z(){

		}

		public MetaData_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'isConfigured') {
							isConfigured = parser.getBooleanValue();
						} else if (text == 'sections') {
							sections = new Arguments(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'MetaData_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Stats {
		public Integer currentPopulation {get;set;} 
		public Integer cumulativePopulation {get;set;} 
		public Integer metGoal {get;set;} 
		public Integer metExitCriteria {get;set;} 
		public Double goalPerformance {get;set;} 

		public Stats(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'currentPopulation') {
							currentPopulation = parser.getIntegerValue();
						} else if (text == 'cumulativePopulation') {
							cumulativePopulation = parser.getIntegerValue();
						} else if (text == 'metGoal') {
							metGoal = parser.getIntegerValue();
						} else if (text == 'metExitCriteria') {
							metExitCriteria = parser.getIntegerValue();
						} else if (text == 'goalPerformance') {
							goalPerformance = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Stats consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public static OC_AN_MC_ID_Journey_JSON parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new OC_AN_MC_ID_Journey_JSON(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			System.debug('-->'+ curr);
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<UpdateContactFields> arrayOfUpdateContactFields(System.JSONParser p) {
        List<UpdateContactFields> res = new List<UpdateContactFields>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new UpdateContactFields(p));
        }
        return res;
    }









    private static List<Outcomes> arrayOfOutcomes(System.JSONParser p) {
        List<Outcomes> res = new List<Outcomes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Outcomes(p));
        }
        return res;
    }









    private static List<Arguments> arrayOfArguments(System.JSONParser p) {
        List<Arguments> res = new List<Arguments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Arguments(p));
        }
        return res;
    }








    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Triggers> arrayOfTriggers(System.JSONParser p) {
        List<Triggers> res = new List<Triggers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Triggers(p));
        }
        return res;
    }


    private static List<Activities> arrayOfActivities(System.JSONParser p) {
        List<Activities> res = new List<Activities>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Activities(p));
        }
        return res;
    }

}